---
title: Размещаем Jekyll с расширениями на GitHub, оттачивая своё Git-фу
---

Изначально [[https://github.com/][GitHub]] подкупает тем, что предлагает /готовую среду для статического сайта/ с [[http://jekyllrb.com/][Jekyll]] и средствами обслуживания [[http://ru.wikipedia.org/wiki/Git][Git]]. Позже вскрывается и его теневая сторона: на [[http://pages.github.com/][GitHub Pages]] доступен только /\laquo{}стерильный\raquo Jekyll без расширений/, тогда как [[http://jekyllrb.com/docs/plugins/][их количество]] растёт день ото дня. Если вы вкусили сладость сторонних расширений (например, на локальной системе) и остались довольны, то почему бы не использовать их дальше, а на *GitHub* отсылать /готовые HTML-страницы/? Освоив начала Git-фу, вы сможете управлять по-отдельности и исходниками (для личного удобства), и готовым результатом (для размещения на сайте).

*** Генерация сайта локально

Давайте исходить из того, что у вас есть сайт на *GitHub Pages*, исходники которого хранятся в ветке =master= репозитория =username.github.com=. При переходе на /локальную генерацию сайта/ желательно иметь следующие возможности:

- Отдельно представлять изменения в исходниках сайта без учёта директории =_site/=.

- Содержимое директории =_site/= должно попадать в корень ветки =master= репозитория на *GitHub*.

Вы можете воспользоваться [[http://arademaker.github.com/blog/2011/12/01/github-pages-jekyll-plugins][топорным методом]] или более изящными решениями, доступными после ознакомления с [[http://git-scm.com/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%BE%D0%B4%D0%BC%D0%BE%D0%B4%D1%83%D0%BB%D0%B8][подмодулями Git]]. Решения, использующие подмодули, на просторах интернета доступны [[http://ilkka.github.com/blog/2010/11/20/hosting-a-jekyll-blog-with-extensions-on-github/#branching-out][тут]] и [[http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html][там]]. Идея в том, чтобы хранить исходники сайта в отдельной ветке =source= с директорией =_site/= как подмодулем, который в свою очередь передаётся напрямую в =master=. Предлагаю вашему вниманию творческую переработку этих решений с замечаниями, найденными в процессе освоения.

*Примечание.* Настоящие джигиты, вероятно, предпочтут [[http://log.pardus.de/2012/08/modular-git-with-git-subtree.html][git subtree]], уже вошедший в состав *Git* с версии 1.7.11.

*** Создание ветки с исходниками

*Внимание!* Перед внесением изменений обязательно создайте резервную копию вашего репозитория.

Переименуем локально ветку =master= в =source=:
#+begin_src console
  $ git branch -m master source
#+end_src
Выполним /push/ ветки с исходниками в удалённый репозиторий =origin=, попутно создав там ветку =source=
#+begin_src console
  $ git push -u origin source
#+end_src
Теперь у нас есть локальная ветка =source= и две удалённые: =master= и =source=. Опция =-u= (или =--set-upstream=) указана неспроста: без неё локальная ветка следовала бы =origin/master=, как это было до переименования. Другими словами, =git pull= забирало бы изменения не из свежесозданной =origin/source=, а как и прежде --- из =origin/master= (такое странное поведение объясняется /несимметричностью push в Git/). Опция =-u= призвана устранить подобное несоответствие.

*** Подключение подмодуля

Удалите директорию =_site/= и уберите из =.gitignore=: после добавления =_site/= как подмодуля, содержимое данной директории не будет смешиваться с исходниками, как и прежде, когда находилось в =.gitignore=. Добавим удалённую ветку =master= уже на правах подмодуля
#+begin_src console
  $ git submodule add -b master <repository> _site
#+end_src
Вместо =<repository>= следует подставить ссылку вида =git@github.com:username/username.github.com.git= на удалённый репозиторий.

Теперь в корне Git-директории находится ветка =source=, а в =_site/= --- ветка =master=, в точности соответствующая удалённой =origin/master=. В данных ветках правки можно вносить, контролировать и отсылать на *GitHub* /независимо друг от друга/.

*** Тонкости работы Jekyll

Как и прежде, запуск *Jekyll* изменяет содержимое директории =_site/=, представляющей собой ветку =master=. При этом файл =.git=, необходимый *Git* для работы с =_site/= как подмодулем, остаётся на месте, если версия *Jekyll* не меньше 1.0. Дадим понять *GitHub Pages*, что [[https://help.github.com/articles/using-jekyll-with-pages][запускать Jekyll не надо]] при помощи пустого файла =.nojekyll=. Начиная с *Jekyll 0.12*, скрытые файлы учитываются наравне с другими, если их явно указать в =_config.yml=
#+begin_src yaml
  include: ['.nojekyll']
#+end_src
Соответствующий файл-пустышка =.nojekyll= должен находиться в директории с исходниками.
